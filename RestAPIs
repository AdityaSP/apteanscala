// STEP 4 : Json Data


  def findUserById(id: Long) = Action {
    val user = userService.tryFindById(id)
    if (user.isDefined) {
      Ok(Json.toJson(List(user)))
    } else {
      NotFound
    }
  }
  

// STEP 3 : Domain user


package domain.user

/**
  * Created by Dell lap on 9/21/2017.
  */
case class User(id: Option[Long],
                email: String)
                
                

//STEP 2 : Place this in service

package services.user

import domain.user.User
import repositories.user.UserRepositoryComponent

trait UserServiceComponent {

  val userService: UserService

  trait UserService {

    def createUser(user: User): User

    def updateUser(user: User)

    def tryFindById(id: Long): Option[User]

    def tryFindByEmail(email: String): Option[User]

    def delete(id: Long)

    def findall: List[User]

  }

}

trait UserServiceComponentImpl extends UserServiceComponent {
  self: UserRepositoryComponent =>

  override val userService = new UserServiceImpl

  class UserServiceImpl extends UserService {

    override def createUser(user: User): User = {
      userRepository.createUser(user)
    }

    override def updateUser(user: User) {
      userRepository.updateUser(user)
    }

    override def tryFindById(id: Long): Option[User] = {
      userRepository.tryFindById(id)
    }

    override def tryFindByEmail(email: String): Option[User] = {
      userRepository.tryFindByEmail(email)
    }

    override def delete(id: Long) {
      userRepository.delete(id)
    }

    override def findall: List[User] = userRepository.findall()
  }
}




//STEP 1 : Place this in repositories.user folder

package repositories.user

import java.util.concurrent.atomic.AtomicLong

import domain.user.User

import scala.collection.mutable

trait UserRepositoryComponent {
  val userRepository: UserRepository

  trait UserRepository {

    def createUser(user: User): User

    def updateUser(user: User)

    def tryFindById(id: Long): Option[User]

    def tryFindByEmail(email: String): Option[User]

    def delete(id: Long)
    def findall():List[User]
  }
}

trait UserRepositoryComponentImpl extends UserRepositoryComponent {
  override val userRepository = new UserRepositoryImpl

  class UserRepositoryImpl extends UserRepository {

    val users = new mutable.HashMap[Long, User]
    val idSequence = new AtomicLong(0)
    users.put(0L, User(Some(0L), "aditya@gmail.com"))
    override def createUser(user: User): User = {
      val newId = idSequence.incrementAndGet()
      val createdUser = user.copy(id = Option(newId))
      users.put(newId, createdUser)
      createdUser
    }

    override def updateUser(user: User) {
      users.put(user.id.get, user)
    }

    override def tryFindById(id: Long): Option[User] = {
      users.get(id)
    }

    override def tryFindByEmail(email: String): Option[User] = {
      import scala.collection.JavaConversions._
      users.values().find(_.email == email)
    }

    override def delete(id: Long) {
      users.remove(id)
    }

    override def findall(): List[User] = {
      users.values.toList
    }
  }
}
