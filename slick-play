// Add a new listing in your controller

GET     /listNewCricketers          controllers.CricketerController.listNewCricketers

  def listNewCricketers = Action { implicit rs :Request[AnyContent]=>
    cricketerRepo.all
  }
  
  

// STEP 8 : 

package models

import javax.inject.Inject

import play.api.db.slick.DatabaseConfigProvider
import slick.jdbc.JdbcProfile

import scala.concurrent.Future

/**
  * Created by Dell lap on 9/19/2017.
  */

case class Cricketer(id: Long, name: String, runs: Int)

class CricketerRepo @Inject()(protected val dbConfigProvider: DatabaseConfigProvider) {
  val dbConfig = dbConfigProvider.get[JdbcProfile]
  //DatabaseConfig.forConfig[JdbcProfile]("db")
  val db = dbConfig.db

  import dbConfig.profile.api._
  private[models] val Cricketers = TableQuery[CricketersTable]

  private def _findById(id: Long): DBIO[Option[Cricketer]] =
    Cricketers.filter(_.id === id).result.headOption

  private def _findByName(name: String): Query[CricketersTable, Cricketer, List] =
    Cricketers.filter(_.name === name).to[List]

  def findById(id: Long): Future[Option[Cricketer]] =
    db.run(_findById(id))

  def findByName(name: String): Future[List[Cricketer]] =
    db.run(_findByName(name).result)

  def all: Future[List[Cricketer]] =
    db.run(Cricketers.to[List].result)

  def create(name: String, runs: Int): Future[Long] = {
    val cricketer = Cricketer(0, name, runs)
    db.run(Cricketers returning Cricketers.map(_.id) += cricketer)
  }

  private[models] class CricketersTable(tag: Tag) extends Table[Cricketer](tag, "CRICKETER") {

    def id = column[Long]("ID", O.AutoInc, O.PrimaryKey)
    def name = column[String]("NAME")
    def runs = column[Int]("RUNS")

    def * = (id, name, runs) <> (Cricketer.tupled, Cricketer.unapply)
    def ? = (id.?, name.?, runs.?).shaped.<>({ r => import r._; _1.map(_ => Cricketer.tupled((_1.get, _2.get, _3.get))) }, (_: Any) => throw new Exception("Inserting into ? projection not supported."))

  }

}


// STEP 7 : slick model mirroring the database

class CricketersTable(tag: Tag) extends Table[Cricketer](tag, "CRICKETER") {

    def id = column[Long]("ID", O.AutoInc, O.PrimaryKey)
    def name = column[String]("NAME")
    def runs = column[Int]("RUNS")

    def * = (id, name, runs) <> (Cricketer.tupled, Cricketer.unapply)
    def ? = (id.?, name.?, runs.?).shaped.<>({ r => import r._; _1.map(_ => Cricketer.tupled((_1.get, _2.get, _3.get))) }, (_: Any) => throw new Exception("Inserting into ? projection not supported."))

  }
  


// STEP 6 : create case class

case class Cricketer(id: Long, name: String, runs: Int)


// STEP 5 : create a model called CricketerRepo.scala 

// STEP 4 : application.conf changes for DB connectivity and evolution

# https://www.playframework.com/documentation/latest/Configuration
slick.dbs.default.profile="slick.jdbc.H2Profile$"
slick.dbs.default.db.driver=org.h2.Driver
slick.dbs.default.db.url="jdbc:h2:mem:play;DB_CLOSE_DELAY=-1"
//slick.dbs.default.db.user=user
//slick.dbs.default.db.password=""

//logger.application=DEBUG
play.evolutions.db.default.autoApply=false

//STEP 3 : create a file called 1.sql with the below contents

# DC schema
 
# --- !Ups


CREATE TABLE CRICKETER (
    ID integer NOT NULL AUTO_INCREMENT PRIMARY KEY,
    NAME varchar(255) NOT NULL,
    RUNS integer NOT NULL
);


# --- !Downs

DROP TABLE CRICKETER;



//STEP 2: Create a folder called "evolutions" and with that create a folder called "default" and not as "evolutions.default"

//STEP 1: // make changes to sbt
name := """trial1"""
organization := "myorg"

version := "1.0-SNAPSHOT"

lazy val root = (project in file(".")).enablePlugins(PlayScala)

scalaVersion := "2.12.3"
routesGenerator := InjectedRoutesGenerator

resolvers += "scalaz-bintray" at "https://dl.bintray.com/scalaz/releases"

libraryDependencies ++= Seq(
    "com.typesafe.play" %% "play-slick" % "3.0.0",
    "com.typesafe.play" %% "play-slick-evolutions" % "3.0.0",
    "com.typesafe.play" %% "play-json" % "2.6.0",
    "com.h2database" % "h2" % "1.4.192",
    specs2 % Test,
    guice
)

libraryDependencies += guice
libraryDependencies += "org.scalatestplus.play" %% "scalatestplus-play" % "3.1.2" % Test

resolvers += "Sonatype snapshots" at "http://oss.sonatype.org/content/repositories/snapshots/"
sourceDirectories in (Compile, TwirlKeys.compileTemplates) :=
  (unmanagedSourceDirectories in Compile).value

fork in run := true

// Adds additional packages into Twirl
//TwirlKeys.templateImports += "myorg.controllers._"

// Adds additional packages into conf/routes
// play.sbt.routes.RoutesKeys.routesImport += "myorg.binders._"
