// Step 5

// Entry into routes conf
GET     /cricketers                 controllers.CricketerController.listCricketers

// method for handling route

def listCricketers = Action { implicit request :Request[AnyContent] =>
    Ok(views.html.listCricketers())
  }


//---------------------------------------------------
// Step 4 

// Create a view called listCricketers.scala

<h1>Cricketers</h1>

<table>
    <thead>
    <tr><th>Name</th><th>Runs</th>
    </thead>
    <tbody>
    @for(c <- cricketers) {
    <tr><td>@c.name</td><td>@c.runs</td></tr>
    }
    </tbody>
</table>

<hr/>



// Step 3
// Dummy data to start with - Add this to your controller

  private val cricketers = ArrayBuffer(
    CricketerData("Virat Kohli", 8000),
    CricketerData("Rahul Dravid", 12000)
  )

// Step 2 : make a copy of HomeController and name it as CricketerController

@Singleton
class CricketerController @Inject()(cc: ControllerComponents) extends AbstractController(cc) {
}

//----------------------------------------------------------
//Step1 : Create case class and form object
// add it in forms/CricketerForm.scala

package forms


/**
  * Created by Dell lap on 9/19/2017.
  */
object CricketerForm {
  import play.api.data.Form
  import play.api.data.Forms._

  case class CricketerData (name :String, runs :Int)

  val form = Form(
    mapping(
      "name" -> nonEmptyText,
      "runs" -> number(min = 0)
    )(CricketerData.apply)(CricketerData.unapply)
  )

}
