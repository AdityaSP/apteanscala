//not a member of Reverse cricket controller error because there is no corresponding entry in the routes.com and we
// are using routes object to access the controller so make this entry into routes.conf

POST    /cricketers                 controllers.CricketerController.createCricketerData



// Step 9 
// Corresponding post call in controller

def createCricketerData = Action { implicit request: Request[AnyContent] =>
   Ok("Got a call here" + request)
}


// Step 8
// create a route variable in the controller and pass it to the template
private val postUrl = routes.CricketerController.createCricketerData()

// corresponding change in the controller
Ok(views.html.listCricketers(cricketers, form, postUrl))

// in the view the corresponding change to pass form and postURL
@(cricketers: Seq[forms.CricketerForm.CricketerData], form: Form[forms.CricketerForm.CricketerData], postUrl :Call)

// Step 7
Add for to my view

@helper.form(postUrl) {
    @helper.CSRF.formField
    @helper.inputText(form("name"))
    @helper.inputText(form("runs"))
    <button>Create Data</button>
}


// Step 6
// collect in the view like this
@(cricketers: Seq[forms.CricketerForm.CricketerData]

// pass data to the form
Ok(views.html.listCricketers(cricketers))

// Step 5

// Entry into routes conf
GET     /cricketers                 controllers.CricketerController.listCricketers

// method for handling route

def listCricketers = Action { implicit request :Request[AnyContent] =>
    Ok(views.html.listCricketers())
  }


//---------------------------------------------------
// Step 4 

// Create a view called listCricketers.scala

<h1>Cricketers</h1>

<table>
    <thead>
    <tr><th>Name</th><th>Runs</th>
    </thead>
    <tbody>
    @for(c <- cricketers) {
    <tr><td>@c.name</td><td>@c.runs</td></tr>
    }
    </tbody>
</table>

<hr/>



// Step 3
// Dummy data to start with - Add this to your controller

  private val cricketers = ArrayBuffer(
    CricketerData("Virat Kohli", 8000),
    CricketerData("Rahul Dravid", 12000)
  )

// Step 2 : make a copy of HomeController and name it as CricketerController

@Singleton
class CricketerController @Inject()(cc: ControllerComponents) extends AbstractController(cc) {
}

//----------------------------------------------------------
//Step1 : Create case class and form object
// add it in forms/CricketerForm.scala

package forms


/**
  * Created by Dell lap on 9/19/2017.
  */
object CricketerForm {
  import play.api.data.Form
  import play.api.data.Forms._

  case class CricketerData (name :String, runs :Int)

  val form = Form(
    mapping(
      "name" -> nonEmptyText,
      "runs" -> number(min = 0)
    )(CricketerData.apply)(CricketerData.unapply)
  )

}
