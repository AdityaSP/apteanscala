// bindFormRequest.get() gives an error hence
// a better - production way of handling forms . place the below code in create post action


val errorFunction = { formWithErrors: Form[CricketerData] =>

      // This is the bad case, where the form had validation errors.
      // Let's show the user the form again, with the errors highlighted.
      // Note how we pass the form with errors to the template.
      BadRequest(views.html.listCricketers(cricketers, formWithErrors, postUrl))
    }

    val successFunction = { data: CricketerData =>
      // This is the good case, where the form was successfully parsed as a Data.
      val cricketer = CricketerData(name = data.name, runs = data.runs)
      cricketers.append(cricketer)
      Redirect(routes.CricketerController.listCricketers())
    }

    val formValidationResult = form.bindFromRequest
    formValidationResult.fold(errorFunction, successFunction)


//Step 10
//change your post action and add the code

def createCricketerData = Action { implicit request: MessagesRequest[AnyContent] =>{
      cricketers.append(form.bindFromRequest.get)
      Redirect(routes.CricketerController.listCricketers())
   }
}


// Error resolving

// Error : incompatiple types of Requests because we are extending from the wrong abstract controller

extends MessagesAbstractController(cc)

// Error: could not find messagesrequestheader implicitly
// we are collecting request from it from controllercomponent but we need to provide a request from messagescontrollercomponent 
// - a more specific version of contoller component has support for i18N

cc: MessagesControllerComponents


// Error request header missing implicitly provide request: MessageRequestHeader
// implicitly provide request object

(implicit request: MessagesRequestHeader)

//not a member of Reverse cricket controller error because there is no corresponding entry in the routes.com and we
// are using routes object to access the controller so make this entry into routes.conf

POST    /cricketers                 controllers.CricketerController.createCricketerData



// Step 9 
// Corresponding post call in controller

def createCricketerData = Action { implicit request: Request[AnyContent] =>
   Ok("Got a call here" + request)
}


// Step 8
// create a route variable in the controller and pass it to the template
private val postUrl = routes.CricketerController.createCricketerData()

// corresponding change in the controller
Ok(views.html.listCricketers(cricketers, form, postUrl))

// in the view the corresponding change to pass form and postURL
@(cricketers: Seq[forms.CricketerForm.CricketerData], form: Form[forms.CricketerForm.CricketerData], postUrl :Call)

// Step 7
Add for to my view

@helper.form(postUrl) {
    @helper.CSRF.formField
    @helper.inputText(form("name"))
    @helper.inputText(form("runs"))
    <button>Create Data</button>
}


// Step 6
// collect in the view like this
@(cricketers: Seq[forms.CricketerForm.CricketerData]

// pass data to the form
Ok(views.html.listCricketers(cricketers))

// Step 5

// Entry into routes conf
GET     /cricketers                 controllers.CricketerController.listCricketers

// method for handling route

def listCricketers = Action { implicit request :Request[AnyContent] =>
    Ok(views.html.listCricketers())
  }


//---------------------------------------------------
// Step 4 

// Create a view called listCricketers.scala

<h1>Cricketers</h1>

<table>
    <thead>
    <tr><th>Name</th><th>Runs</th>
    </thead>
    <tbody>
    @for(c <- cricketers) {
    <tr><td>@c.name</td><td>@c.runs</td></tr>
    }
    </tbody>
</table>

<hr/>



// Step 3
// Dummy data to start with - Add this to your controller

  private val cricketers = ArrayBuffer(
    CricketerData("Virat Kohli", 8000),
    CricketerData("Rahul Dravid", 12000)
  )

// Step 2 : make a copy of HomeController and name it as CricketerController

@Singleton
class CricketerController @Inject()(cc: ControllerComponents) extends AbstractController(cc) {
}

//----------------------------------------------------------
//Step1 : Create case class and form object
// add it in forms/CricketerForm.scala

package forms


/**
  * Created by Dell lap on 9/19/2017.
  */
object CricketerForm {
  import play.api.data.Form
  import play.api.data.Forms._

  case class CricketerData (name :String, runs :Int)

  val form = Form(
    mapping(
      "name" -> nonEmptyText,
      "runs" -> number(min = 0)
    )(CricketerData.apply)(CricketerData.unapply)
  )

}
